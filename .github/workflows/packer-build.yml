name: Packer Build CI

on:
  push:
    branches: ["main"]

jobs:
  build:
    name: packer-build
    runs-on: ubuntu-latest

    env:
      MYSQL_USERNAME: ${{ secrets.DB_USERNAME }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.DB_DATABASE }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SUBNET_ID: ${{ secrets.SUBNET_ID }}
      SOURCE_AMI: ${{ secrets.SOURCE_AMI }}
      DEV_USER: ${{ secrets.DEV_USER }}
      DEMO_USER: ${{ secrets.DEMO_USER }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
      VPC_ID: ${{ secrets.VPC_ID }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Dependencies
        run: |
          npm install

      - name: Run Integration Tests
        run: |
          npm test || exit 1

      - name: Create systemd Service File
        run: |
          cat << EOF > webapp.service
          [Unit]
          Description=Node.js Web Application
          After=network.target

          [Service]
          Type=simple
          User=csye6225
          Group=csye6225
          WorkingDirectory=/opt/csye6225/webapp
          ExecStart=/usr/bin/node app.js
          Restart=always
          Environment=NODE_ENV=production
          Environment=DB_HOST=${DB_HOST}
          Environment=DB_USER=${DB_USERNAME}
          Environment=DB_PASSWORD=${DB_PASSWORD}
          Environment=DB_NAME=${DB_DATABASE}

          [Install]
          WantedBy=multi-user.target
          EOF

      - name: Create Application Zip
        run: |
          zip -r webapp.zip . \
            --exclude ".git/*" \
            --exclude "node_modules/*" \
            --exclude "test/*"

      - name: Install Packer
        uses: hashicorp/setup-packer@v2

      - name: Move Files to Packer Directory
        run: |
          mkdir -p packer
          mv img-creation.pkr.hcl packer/
          mv webapp.zip packer/
          mv webapp.service packer/
          mv scripts/setup.sh packer/

      - name: Update setup.sh
        run: |
          cat << 'EOF' > packer/setup.sh
          #!/bin/bash
          set -e

          # System updates and dependencies
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y nodejs npm mysql-server unzip

          # Create user and group
          sudo groupadd csye6225 || echo "Group exists"
          sudo useradd -r -s /usr/sbin/nologin -g csye6225 csye6225 || echo "User exists"

          # Setup application directory
          sudo mkdir -p /opt/csye6225
          sudo unzip webapp.zip -d /opt/csye6225/webapp

          # Setup service
          sudo mv webapp.service /etc/systemd/system/
          sudo chown -R csye6225:csye6225 /opt/csye6225
          sudo chmod -R 750 /opt/csye6225

          # Configure MySQL
          sudo systemctl start mysql
          sudo systemctl enable mysql
          sudo mysql -e "CREATE DATABASE IF NOT EXISTS ${DB_DATABASE};"
          sudo mysql -e "CREATE USER IF NOT EXISTS '${DB_USERNAME}'@'localhost' IDENTIFIED BY '${DB_PASSWORD}';"
          sudo mysql -e "GRANT ALL PRIVILEGES ON ${DB_DATABASE}.* TO '${DB_USERNAME}'@'localhost';"
          sudo mysql -e "FLUSH PRIVILEGES;"

          # Setup application
          cd /opt/csye6225/webapp
          sudo -u csye6225 npm install --production

          # Configure systemd
          sudo systemctl daemon-reload
          sudo systemctl enable webapp
          EOF

      - name: Run Packer Build
        run: |
          cd packer
          packer init .
          packer build \
            -var "aws_region=${AWS_REGION}" \
            -var "subnet_id=${SUBNET_ID}" \
            -var "source_ami=${SOURCE_AMI}" \
            -var "dev_user=${DEV_USER}" \
            -var "demo_user=${DEMO_USER}" \
            -var "access_key=${AWS_ACCESS_KEY}" \
            -var "secret_key=${AWS_SECRET_ACCESS_KEY}" \
            -var "security_group_id=${SECURITY_GROUP_ID}" \
            -var "vpc_id=${VPC_ID}" \
            -var "db_username=${MYSQL_USERNAME}" \
            -var "db_password=${MYSQL_ROOT_PASSWORD}" \
            -var "db_database=${MYSQL_DATABASE}" \
            img-creation.pkr.hcl

      - name: Verify AMI Creation
        run: |
          aws ec2 describe-images \
            --owners self \
            --filters "Name=name,Values=CSYE6225*" \
            --query 'Images[*].[ImageId,State,CreationDate]' \
            --output table
