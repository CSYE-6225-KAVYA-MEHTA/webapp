name: Packer Build CI

on:
  push:
    branches: ["main"]#

jobs:
  build:
    name: packer-build
    runs-on: ubuntu-latest

    env:
      MYSQL_USERNAME: ${{ secrets.DB_USERNAME }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.DB_DATABASE }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SUBNET_ID: ${{ secrets.SUBNET_ID }}
      SOURCE_AMI: ${{ secrets.SOURCE_AMI }}
      DEV_USER: ${{ secrets.DEV_USER }}
      DEMO_USER: ${{ secrets.DEMO_USER }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
      VPC_ID: ${{ secrets.VPC_ID }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo systemctl start mysql
          sudo systemctl enable mysql
          sudo mysql -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_DATABASE }};"
          sudo mysql -e "CREATE USER IF NOT EXISTS '${{ secrets.DB_USERNAME }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';"
          sudo mysql -e "GRANT ALL PRIVILEGES ON ${{ secrets.DB_DATABASE }}.* TO '${{ secrets.DB_USERNAME }}'@'localhost';"
          sudo mysql -e "FLUSH PRIVILEGES;"

      - name: Verify MySQL Status
        run: |
          sudo systemctl status mysql || echo "MySQL Service Failed to Start!"
          sudo mysql -e "SHOW DATABASES;"

      - name: Create WebApp Zip File
        run: |
          zip -r webapp-demo.zip . -x "*.git*" "*node_modules*" "*logs*" "*temp*" || { echo "Zip failed!"; exit 1; }

      - name: Debug - Check WebApp Zip File
        run: |
          if [ ! -f webapp-demo.zip ]; then
            echo "ERROR: webapp-demo.zip file is missing!"
            exit 1
          fi
          ls -al

      - name: Move WebApp Zip to Packer Directory
        run: |
          mkdir -p packer
          mv webapp-demo.zip packer/

      - name: Run Integration Tests
        run: |
          npm test || exit 1

      - name: Run Packer Build
        run: |
          cd packer
          packer build \
            -var "aws_region=${{ env.AWS_REGION }}" \
            -var "subnet_id=${{ env.SUBNET_ID }}" \
            -var "source_ami=${{ env.SOURCE_AMI }}" \
            -var "dev_user=${{ env.DEV_USER }}" \
            -var "demo_user=${{ env.DEMO_USER }}" \
            -var "aws_access_key=${{ env.AWS_ACCESS_KEY }}" \
            -var "aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}" \
            -var "security_group_id=${{ env.SECURITY_GROUP_ID }}" \
            -var "vpc_id=${{ env.VPC_ID }}" \
            img-creation.pkr.hcl

      - name: Verify AMI Creation
        run: |
          aws ec2 describe-images \
            --owners self \
            --filters "Name=name,Values=CSYE6225*" \
            --query 'Images[*].[ImageId,State,CreationDate]' \
            --output table
