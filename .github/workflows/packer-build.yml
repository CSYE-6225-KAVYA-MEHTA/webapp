name: Packer Build CI

on:
  push:
    branches: ["main"]

jobs:
  build:
    name: packer-build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Zip File
        run: |
          zip -r webapp.zip .
          cp webapp.zip packer/

      - name: List Files
        run: ls -al

      - name: Upload Zip File
        uses: actions/upload-artifact@v4
        with:
          name: webapp zip creation
          path: webapp.zip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run Packer
        run: |
          # Install Packer
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install packer -y

          ls
          cd packer
          packer init img-creation.pkr.hcl

          packer build \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "subnet_id=${{ secrets.SUBNET_ID }}" \
            -var "source_ami=${{ secrets.SOURCE_AMI }}" \
            -var "dev_user=${{ secrets.DEV_USER }}" \
            -var "demo_user=${{ secrets.DEMO_USER }}" \
            -var "security_group_id=${{ secrets.SECURITY_GROUP_ID }}" \
            -var "db_username=${{ secrets.DB_EC2_USER }}" \
            -var "db_password=${{ secrets.DB_PASSWORD }}" \
            -var "db_database=${{ secrets.DB_DATABASE }}" \
            -var "server_port=${{ secrets.SERVER_PORT }}" \
            -var "db_host=${{ secrets.DB_HOST }}" \
            img-creation.pkr.hcl

      - name: Get Latest AMI ID
        id: ami_id
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --owners self \
            --filters "Name=name,Values=csye6225_*" \
            --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
            --output text)
          echo "Latest AMI ID retrieved: ${AMI_ID}"
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV
          echo "ami_id=${AMI_ID}" >> $GITHUB_OUTPUT

      - name: Share AMI with DEMO Account
        run: |
          aws ec2 modify-image-attribute \
            --image-id ${{ steps.ami_id.outputs.ami_id }} \
            --launch-permission "Add=[{UserId=${{ secrets.DEMO_USER }}}]"

      - name: Reconfigure AWS CLI for DEMO Account
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create New Launch Template Version
        id: lt_version
        run: |
          echo "Creating new launch template version with AMI ${AMI_ID}..."
          output=$(aws ec2 create-launch-template-version \
            --launch-template-id "${{ secrets.LAUNCH_TEMPLATE_ID }}" \
            --version-description "Auto-updated by GitHub Actions" \
            --source-version "$LATEST_VERSION" \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}")
          echo "Output from create-launch-template-version:"
          echo "$output"

          # Extract the version number using jq; ensure jq is available in the runner
          version=$(echo "$output" | jq -r '.LaunchTemplateVersion.VersionNumber')

          if [ -z "$version" ]; then
            echo "Error: Failed to extract launch template version number. Aborting."
            exit 1
          fi

          echo "version=$version" >> "$GITHUB_OUTPUT"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          LAUNCH_TEMPLATE_ID: ${{ secrets.LAUNCH_TEMPLATE_ID }}
          AMI_ID: ${{ env.AMI_ID }}
          LATEST_VERSION: ${{ secrets.LATEST_VERSION }}

      - name: Update Auto Scaling Group to Use Latest Launch Template Version
        run: |
          # Check if the launch template version is available from the previous step
          if [ -z "${{ steps.lt_version.outputs.version }}" ]; then
            echo "Error: Launch template version is empty. Aborting update."
            exit 1
          fi

          echo "Updating auto scaling group ${{ secrets.ASG_NAME }} with Launch Template Version ${{ steps.lt_version.outputs.version }}..."
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
            --launch-template "LaunchTemplateId=${{ secrets.LAUNCH_TEMPLATE_ID }},Version=${{ steps.lt_version.outputs.version }}"

          # echo "Updating auto scaling group ${{ secrets.ASG_NAME }} with Launch Template Version ${{ steps.lt_version.outputs.version }}..."
          # aws autoscaling update-auto-scaling-group \
          #   --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
          #   --launch-template "LaunchTemplateId=${{ secrets.LAUNCH_TEMPLATE_ID }},
          #   Version=${{ steps.lt_version.outputs.version }}"
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}

      - name: Start Instance Refresh
        id: refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
            --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}' \
            --query 'InstanceRefreshId' \
            --output text)
          echo "refresh_id=$REFRESH_ID" >> $GITHUB_OUTPUT

      - name: Wait for Instance Refresh to Complete
        run: |
          STATUS=""
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
              --instance-refresh-ids ${{ steps.refresh.outputs.refresh_id }} \
              --query 'InstanceRefreshes[0].Status' \
              --output text)

            echo "Current status: $STATUS"
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance refresh completed successfully."
              break
            elif [[ "$STATUS" == "Cancelled" || "$STATUS" == "Failed" ]]; then
              echo "Instance refresh failed or was cancelled."
              exit 1
            fi
            sleep 30
          done
